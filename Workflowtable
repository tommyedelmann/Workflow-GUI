import PySimpleGUI as sg
from xml.dom import minidom
import os
import webbrowser
import zipfile
from datetime import datetime
sg.theme('DefaultNoMoreNagging')


#------- XML reading
importpath = r'C:\Users\tommy.edelmann\Workflow\Batch'
importxml = 'Prodzip.xml'
os.chdir(importpath)
mydoc = minidom.parse(importxml)
tasks = mydoc.getElementsByTagName('task')
params = mydoc.getElementsByTagName('config') #fix

def taskcall(i, key):
    return tasks[i].attributes[key].value


#------- data setup
headings = ['Command', 'Description', 'Status', 'Start Date/Time', 'Logging']
maindir = params[0].attributes['maindir'].value
info = [[j for j in range(len(headings))] for i in range(len(tasks))]

for i in range(len(tasks)):
    info[i][0] = taskcall(i, 'name')
    info[i][2] = 'Pending'
    info[i][3], info[i][4] = '', ''

for i in range(len(tasks)):
    if taskcall(i, 'type') == 'prod':
        info[i][1] = "Produce two files, '.log' and '.err', in " + maindir + taskcall(i, 'path')
    if taskcall(i, 'type') == 'zip':
        info[i][1] = "Zip all '.log' and '.err' files in " + maindir + taskcall(i, 'path')
    if taskcall(i, 'type') == 'check':
        info[i][1] = "Check if the produced and zipped '.log' and '.err' files exist in " + maindir + taskcall(i, 'path') + taskcall(i, 'zip')
original = info[:]

indexfix = 0
pausenums = []
for i in range(len(tasks)):
    if taskcall(i, 'pauseafter') == '1':
        info.insert(i + indexfix + 1, ['Userpause', "To start on next task, press 'Continue " + str(indexfix + 1) + ".'", 'Pending', '', ''])
        pausenums.append(int(i+indexfix + 1))
        indexfix += 1
newtasknames = []
for i in range(len(info)):
    newtasknames.append(info[i][0])


#------ pause setup
pauselist = []
for i in range(0, len(tasks)):
    if taskcall(i, 'pauseafter') == '1':
        pauselist.append(int(taskcall(i, 'id')))
pauseindex = [[0, pauselist[0]]]
for i in range(1, len(pauselist)):
    pauseindex.append([pauseindex[i - 1][1] + 1, pauselist[i]])
pauseindex.append([pauseindex[-1][1] + 1, len(tasks) - 1])


#------- layout setup
layout = [[sg.Button('Start'), sg.Button('Stop')],
          [sg.Table(values=info, headings=headings, max_col_width=80,
                    auto_size_columns=True, justification='left', alternating_row_color='lightblue',

                    key='-TABLE-', change_submits = True)]]
buttons = []
for i in range(0, indexfix):
    buttons.append(sg.Button('Continue ' + str(i + 1)))
layout.append(buttons)

window = sg.Window('Workflow Manager', layout)


#------- update functions
pausestat = []
for i in range(0, len(pausenums)):
    pausestat.append('Pending')

pausetime = []
for i in range(0, len(pausenums)):
    pausetime.append('')

def printtime():
    now = datetime.now()
    if int(now.strftime("%H")) < 12:
        if int(now.strftime("%H"))==0:
            dt_string = str(now.strftime("%d/%m/%Y 12:%M:%S AM"))
        if int(now.strftime("%H")) > 0:
            dt_string = str(now.strftime("%d/%m/%Y %H:%M:%S AM"))
    if int(now.strftime("%H")) > 12:
        pmhour = str(int(now.strftime("%H")) - 12)
        dt_string = str(now.strftime("%d/%m/%Y " + pmhour + ":%M:%S PM"))
    if int(now.strftime("%H")) == 12:
        dt_string = str(now.strftime("%d/%m/%Y %H:%M:%S PM"))
    return dt_string

def Update(loc, text):
    window[loc].update(text)

def updatelayout(x, y, value):
    original[x][y] = value
    indexfix = 0
    updateinfo = original[:]
    for i in range(len(tasks)):
        if taskcall(i, 'pauseafter') == '1':
            updateinfo.insert(i + indexfix + 1,
                             ['Userpause', "To start on next task, press 'Continue " + str(indexfix + 1) + ".'", str(pausestat[indexfix]), pausetime[indexfix], ''])
            indexfix += 1
    Update('-TABLE-', updateinfo)

def updatetask(status):
    updatelayout(i, 2, status)
    updatelayout(i, 3, printtime())
    updatelayout(i, 4, maindir + taskcall(i, 'path'))


#-------- run functions
progresscounter = 0
def runtasks(i):
    if taskcall(i, 'type') == 'prod':
        os.chdir(maindir + taskcall(i, 'path'))
        os.system(taskcall(i, 'batch'))
        if os.system(taskcall(i, 'batch')) == 0:
            updatetask('Done')
        else:
            updatetask('Failed')
    if taskcall(i, 'type') == 'zip':
        os.chdir(maindir + taskcall(i, 'path'))
        os.system(taskcall(i, 'batch'))
        if os.system(taskcall(i, 'batch')) == 0:
            updatetask('Done')
        else:
            updatetask('Failed')
    if taskcall(i, 'type') == 'check':
        os.chdir(maindir + taskcall(2, 'path'))
        z = zipfile.ZipFile(taskcall(2, 'zip'))
        ziplist = z.namelist()
        if taskcall(2, 'log') in ziplist:
            if taskcall(2, 'error') in ziplist:
                updatetask('Done')
            else:
                updatetask('Failed')
        else:
            updatetask('Failed')


#-------- run section
while True:
    event, values = window.read()
    if event =='Start':
        progresscounter = 0
        for i in range(pauseindex[0][0], pauseindex[0][1] + 1):
            runtasks(i)
            progresscounter +=1

    if event == 'Stop':
        break

    if event == 'Continue 1':
        pausestat[0] = 'Done'
        pausetime[0] = printtime()
        progresscounter += 1
        for i in range(pauseindex[1][0], pauseindex[1][1] + 1):
            runtasks(i)
            progresscounter += 1

    if event == 'Continue 2':
        pausestat[1] = 'Done'
        pausetime[1] = printtime()
        progresscounter += 1
        for i in range(pauseindex[1][0], pauseindex[2][1] + 1):
            runtasks(i)
            progresscounter += 1

    if event == 'Continue 3':
        pausestat[2] = 'Done'
        pausetime[2] = printtime()
        progresscounter += 1
        for i in range(pauseindex[1][0], pauseindex[3][1] + 1):
            runtasks(i)
            progresscounter += 1

    if event == 'Continue 4':
        pausestat[3] = 'Done'
        pausetime[3] = printtime()
        progresscounter += 1
        for i in range(pauseindex[1][0], pauseindex[4][1] + 1):
            runtasks(i)
            progresscounter += 1

    if event == '-TABLE-':
        for i in values['-TABLE-']:
            for f in range(len(tasks)):
                if i<progresscounter:
                    if newtasknames[i] ==  taskcall(f, 'name'):
                        webbrowser.open(os.path.realpath((maindir + taskcall(f, 'path'))))
                        sg.Print('Directory from ' + taskcall(f, 'name') + ':   ' + maindir + taskcall(f, 'path'))
                        sg.Print('File names: ' + params[0].attributes[taskcall(f, 'path') + 'files'].value)
window.close()
